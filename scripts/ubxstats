#!/usr/bin/env python

import argparse
import sys
import os
import time

import ubx


argparser = argparse.ArgumentParser(description="Analyze a UBX stream")
argparser.add_argument("input", help="file or socket")
argparser.add_argument("--progress", help="show progress", action="store_true")
argparser.add_argument("--fast", help="disable counting bytes read", action="store_true")

args = argparser.parse_args()

if ":" in args.input:
    raise NotImplementedError()
else:
    if not os.path.exists(args.input):
        raise ValueError("Given argument is neither a path nor a socket.")
    f = open(args.input, "rb")
    read_raw = f.read


stats = ubx.Statistics()


class ReadWrapper:
    def __init__(self, read_raw):
        self._read_raw = read_raw
        self.t = -float("inf")

    def _read(self, n):
        stats.add_bytesread_try(n)
        result = self._read_raw(n)
        stats.add_bytesread_success(len(result))
        return result

    if args.progress:
        def read(self, n):
            result = self._read(n)
            t = time.time()
            if t - self.t > 0.05:
                sys.stdout.write("Bytes read: {}\r".format(stats.bytes_read_success))
                sys.stdout.flush()
                self.t = t
            return result
    else:
        def read(self, n):
            return self._read(n)

if args.fast:
    reader = ubx.Reader(read_raw)
else:
    readwrapper = ReadWrapper(read_raw)
    reader = ubx.Reader(readwrapper.read)

parser = ubx.default_parser


def run():
    while True:
        try:
            rawmessage = reader.read_rawmessage()
        except ubx.ChecksumError:
            stats.add_checksumerror()
            continue
        except EOFError:
            break
        else:
            stats.add_rawmessage(rawmessage)

        try:
            message = parser.parse(rawmessage)
        except KeyError:
            stats.add_unknownmessage(rawmessage)
            continue
        except ubx.exceptions.PayloadError:
            stats.add_payloaderror(
                ubx.Message(parser.descriptions[rawmessage.key], None))
            continue
        else:
            stats.add_message(message)


try:
    run()
except KeyboardInterrupt:
    pass

if args.progress:
    sys.stdout.write(" " * 50 + "\r")
    sys.stdout.flush()

print(stats)
